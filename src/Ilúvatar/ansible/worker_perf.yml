- hosts: workers
  vars:
    expected: "Connection failure: [Errno 104] Connection reset by peer"
    host_group: "{{ groups['workers'] }}"
    assigned_port: "{{ (worker.port | int + host_group.index(inventory_hostname)) }}"
    bin_dir: "/tmp/iluvatar/bin"
    exe_dest: "{{bin_dir}}/{{ worker.bin_name }}"
    config_dest: "{{bin_dir}}/{{ inventory_hostname }}.json"
    __architecture: "{{ servers[ansible_host].architecture | default('x86_64-unknown-linux-gnu') }}"
    def_bin_src: "{{iluvatar_home}}/target/{{__architecture}}/{{target}}"
    __bin_src: "{{ worker_bin_src | default(def_bin_src) }}"
    __remote_bin_src: "{{ remote_bin_src | default(false) }}"
    __worker_address: "{{ worker_address | default(servers[ansible_host].internal_ip) }}"
    __hardware_interface: "{{ hardware_interface | default(servers[ansible_host].hardware_interface) }}"
  vars_files:
    - group_vars/all.yml
    - group_vars/host_addresses.yml

  tasks:
  - name: Get running worker process
    shell: "ps -ef | grep -v grep | grep -w 'perf record' | awk '{print $2}'"
    register: running_worker
    when: mode == "clean"

  - name: Kill running worker process on localhost
    shell: "kill --signal SIGINT {{ item }}"
    with_items: "{{ running_worker.stdout_lines }}"
    become: yes
    when: (ansible_host == "127.0.0.1" or ansible_host == "localhost") and mode == "clean"
    run_once: true

  - name: Kill running worker process distrib
    shell: "kill {{ item }}"
    when: (ansible_host != "127.0.0.1" and ansible_host != "localhost") and mode == "clean"
    with_items: "{{ running_worker.stdout_lines }}"
    become: yes

  - name: Wait until the process is finished and pid was destroyed
    ansible.builtin.wait_for:
      path: /proc/{{item}}/status
      state: absent
    with_items: "{{ running_worker.stdout_lines }}"
    when: mode == "clean"

  - name: Create bin directory
    file:
      path: "{{bin_dir}}"
      state: directory
      recurse: yes
    become: yes
      
  - name: copy worker executable
    ansible.builtin.copy:
      src: "{{__bin_src}}/{{worker.bin_name}}"
      dest: "{{exe_dest}}"
      mode: "preserve"
    become: yes

  - name: copy worker config
    ansible.builtin.copy:
      src: "{{__bin_src}}/{{worker.config_name}}"
      dest: "{{config_dest}}"
      mode: "preserve"
    become: yes

  - name: clean localhost
    ansible.builtin.command: 
      argv: 
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
        - clean
    become: yes
    when: (ansible_host == "127.0.0.1" or ansible_host == "localhost") and mode == "clean"
    run_once: true

  - name: clean distrib host
    ansible.builtin.command: 
      argv: 
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
        - clean
    become: yes
    when: mode == "clean"

  - name: run worker executable
    ansible.builtin.command: 
      argv: 
        - perf
        - record
        - -F
        - "{{perf_record_freq_hz}}"
        - -g
        - --user-callchains
        - --inherit
        - -o 
        - "{{worker_log_dir}}/perf.data"
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
    become: yes
    async: 2592000               # 60*60*24*30 â€“ 1 month
    poll: 0
    when: mode == "deploy"
    environment:
      "ILUVATAR_WORKER__name": "{{ inventory_hostname }}"
      "ILUVATAR_WORKER__port": "{{ assigned_port }}"
      "ILUVATAR_WORKER__address" : "{{ __worker_address }}"
      "ILUVATAR_WORKER__logging__basename": "worker_{{ inventory_hostname }}"
      "ILUVATAR_WORKER__logging__directory": "{{ worker_log_dir | default('/tmp/iluvatar/logs') }}"
      "ILUVATAR_WORKER__logging__level": "{{ worker_log_level | default('info') }}"
      "ILUVATAR_WORKER__load_balancer_host" : "{{ controller.host }}"
      "ILUVATAR_WORKER__load_balancer_port" : "{{ controller.port }}"
      "ILUVATAR_WORKER__timeout_sec" : "{{ worker_timeout_sec | default(6000) }}"
      # Container resources
      "ILUVATAR_WORKER__container_resources__memory_mb" : "{{ worker_memory_mb | default(2048) }}"
      "ILUVATAR_WORKER__container_resources__cores" : "{{ worker_cores | default(4) }}"
      "ILUVATAR_WORKER__container_resources__eviction" : "{{ worker_eviction | default('LRU') }}"
      "ILUVATAR_WORKER__container_resources__concurrent_creation" : "{{ worker_concurrent_creation | default(5) }}"
      "ILUVATAR_WORKER__container_resources__startup_timeout_ms" : "{{ worker_startup_timeout_ms | default(10000) }}"
      "ILUVATAR_WORKER__container_resources__pool_freq_ms" : "{{ worker_cm_pool_freq_ms | default(1000) }}"
      # Networking
      "ILUVATAR_WORKER__networking__pool_size" : "{{ worker_pool_size | default(10) }}"
      "ILUVATAR_WORKER__networking__use_pool" : "{{ worker_use_pool | default(true) }}"
      "ILUVATAR_WORKER__networking__pool_freq_ms" : "{{ worker_net_pool_freq_ms | default(1000) }}"
      "ILUVATAR_WORKER__networking__hardware_interface" : "{{ __hardware_interface }}"
      # Energy config
      "ILUVATAR_WORKER__energy__rapl_freq_ms" : "{{ worker_rapl_log_freq_ms | default(1000) }}"
      "ILUVATAR_WORKER__energy__perf_freq_ms" : "{{ worker_perf_log_freq_ms | default(1000) }}"
      "ILUVATAR_WORKER__energy__perf_record_freq_hz" : "{{ perf_record_freq_hz | default(1000) }}"
      "ILUVATAR_WORKER__energy__ipmi_freq_ms" : "{{ worker_ipmi_log_freq_ms | default(0) }}"
      "ILUVATAR_WORKER__energy__ipmi_pass_file" : "{{ worker_ipmi_pass_file | default('') }}"
      "ILUVATAR_WORKER__energy__ipmi_ip_addr" : "{{ worker_ipmi_ip_addr | default(servers[ansible_host].ipmi_ip) }}"
      "ILUVATAR_WORKER__energy__log_folder": "{{ worker_log_dir | default('/tmp/iluvatar/logs') }}"
      # Invocation config
      "ILUVATAR_WORKER__invocation__queue_policy" : "{{ worker_queue_policy | default('fcfs') }}"
      "ILUVATAR_WORKER__invocation__retries" : "{{ worker_invoke_retries | default(0) }}"
      "ILUVATAR_WORKER__invocation__queue_sleep_ms" : "{{ worker_queue_sleep_ms | default(1) }}"

    register: worker_output

  - name: debug print
    # when: ansible_host == "127.0.0.1" or ansible_host == "localhost"
    # run_once: true
    debug:
      msg: "{{ worker_output }}"

  - name: wait until the worker on this host is up and running
    ansible.builtin.uri:
      url:
        "http://{{__worker_address}}:{{assigned_port}}/ping"
      validate_certs: "no"
      # RPC server doesn't accept basic HTTP connections
      # but we can try connecting to it once it's up and know it's alive
      status_code: [-1, 0.9, 1.1]
    register: result
    until: result.msg == expected
    retries: 10
    delay: 5
    when: mode == "deploy"
