- hosts: controller
  vars:
    host_group: "{{ groups['controller'] }}"
    host_group_size: "{{ host_group | length }}"
    bin_dir: "/tmp/ilúvatar/bin"
    exe_dest: "{{bin_dir}}/{{ controller.bin_name }}"
    config_dest: "{{bin_dir}}/{{ controller.config_name }}"
    __worker_address: "{{ worker_address | default(servers[ansible_host].internal_ip) }}"
  vars_files:
    - group_vars/all.yml

  tasks:
  - name: limit count
    ansible.builtin.assert:
      that: host_group_size == "1"
      fail_msg: "Can only support one controller"
      success_msg: "Good on number of controllers, got {{ host_group_size }}"

  - name: Get running controller process
    shell: "ps -ef | grep -v grep | grep -w {{ controller.bin_name }} | awk '{print $2}'"
    register: running_lb
    when: mode == "clean"

  - name: Kill running controller process
    shell: "kill {{ item }}"
    with_items: "{{ running_lb.stdout_lines }}"
    become: yes
    when: mode == "clean"
    
  - name: Create bin directory
    file:
      path: "{{bin_dir}}"
      state: directory
      recurse: yes
    become: yes

  - name: copy controller executable
    ansible.builtin.copy:
      src: "{{ilúvatar_home}}/target/{{target}}/{{controller.bin_name}}"
      dest: "{{exe_dest}}"
      mode: "preserve"
    when: mode == "deploy"
    become: yes

  - name: copy controller config
    ansible.builtin.copy:
      src: "{{ilúvatar_home}}/target/{{target}}/{{controller.config_name}}"
      dest: "{{config_dest}}"
      mode: "preserve"
    when: mode == "deploy"
    become: yes

  - name: run controller executable
    ansible.builtin.command: 
      argv: 
        - "{{exe_dest}}"
        - -c 
        - "{{config_dest}}"
    become: yes
    async: 2592000               # 60*60*24*30 – 1 month
    poll: 0
    when: mode == "deploy"
    environment:
      "ILUVATAR_CONTROLLER__name": "{{ controller.host }}"
      "ILUVATAR_CONTROLLER__port": "{{ controller.port }}"
      "ILUVATAR_CONTROLLER__address": "{{ __worker_address | default('localhost') }}"
      "ILUVATAR_CONTROLLER__logging__directory" : "{{ controller_log_dir | default('/tmp/ilúvatar/logs') }}"
      "ILUVATAR_CONTROLLER__logging__level" : "{{ controller_log_level | default('info') }}"
      "ILUVATAR_CONTROLLER__load_balancer__algorithm" : "{{ controller.algorithm }}"
      "ILUVATAR_CONTROLLER__load_balancer__load_metric" : "{{ controller.algorithm }}"
      "ILUVATAR_CONTROLLER__influx__host" : "{{ influx.address }}"
      "ILUVATAR_CONTROLLER__influx__org" : "{{ influx.organization }}"
      "ILUVATAR_CONTROLLER__influx__token" : "{{ hostvars[ groups['influx']|first ].influx_token }}"
    register: controller_output

  - name: debug print
    debug:
      msg: "{{ controller_output }}"

  - name: wait until the controller on this host is up and running
    uri:
      url:
        "http://{{__worker_address}}:{{controller.port}}/ping"
      validate_certs: "no"
    register: result
    until: result.status == 200
    retries: 10
    delay: 5
    when: mode == "deploy"
